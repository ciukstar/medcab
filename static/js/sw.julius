
self.onpush = function (e) {

  const message = e.data.json();
  
  const promise = self.clients.matchAll({ type: 'window' }).then(function (clients) {

    const focused = clients.filter(client => client.focused);
    focused.forEach(client => { client.postMessage(message); });
    
    return [focused.length < 1, message];
    
  }).then(([notify,message]) => {

    let actions;
    
    if (message.messageType === #{PushMsgTypeRefresh}) {
      actions = [ { action: 'dismissNotifcationRefresh', title: #{msgr MsgDismissNotification} }];
    } else {
      actions = [];
    }
    
    return !notify
      ? Promise.resolve()
      : self.registration.showNotification(message.title, {
	requireInteraction: true,
	tag: message.messageType,
	renotify: true,
	icon: message.icon,
	body: message.body,
	image: message.image,
	data: message,
	actions: actions
      });
    
  });
  
  e.waitUntil(promise);
  
};

self.addEventListener('notificationclick', function (e) {
  
  if (e.action === 'dismissNotifcationRefresh') {
    e.notification.close();
  }
    
});


self.addEventListener('fetch', function (e) {

  let url = new URL(e.request.url);
  let needsEndpoint = e.request.method === 'GET'
      && url.origin === self.location.origin
      && !e.request.url.includes('/static/')
      && !e.request.url.includes('/photo')
      && !e.request.url.includes('/manifest.json')
      && !e.request.url.includes('/favicon.ico');
  
  if (needsEndpoint) {
    
    e.respondWith(
      self.registration.pushManager.getSubscription().then(function (subscription) {
	
	if (!subscription) {
	  return fetch(e.request);
	} else {
	  url.searchParams.set(#{paramEndpoint}, subscription.endpoint);
	  return fetch(url);
	}
	
      })
    );
    
  }
  
});
