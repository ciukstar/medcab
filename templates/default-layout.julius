
navigator.serviceWorker.register("@{StaticR js_sw_js}", { scope: "/" });

const dialogIncomingCall = document.getElementById(#{idDialogIncomingCall});
const imgPhoto = document.getElementById(#{idImgPhoto});
const figcaptionPhoto = document.getElementById(#{idFigcaptionPhoto});
const buttonDecline = document.getElementById(#{idButtonDecline});
const buttonAccept = document.getElementById(#{idButtonAccept});

const dialogVideoSession = document.getElementById(#{idDialogVideoSession});

navigator.serviceWorker.addEventListener('message', function (message) {
  
  imgPhoto.src = `/accounts/${message.data.senderId}/photo/AvatarColorLight`;
  figcaptionPhoto.textContent = !message.data.senderName ? message.data.senderEmail : message.data.senderName;
  
  buttonDecline.onclick = function (event) {
    fetch('@{VideoR PushMessageR}', {
      method: 'POST',
      headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
	"messageType": #{show PushMsgTypeDecline},
	"icon": message.data.icon,
	"channelId": message.data.channelId,
	"polite": message.data.polite,
	"ws": message.data.ws,
	"senderId": message.data.recipientId,
	"senderPhoto": message.data.senderPhoto,
	"recipientId": message.data.senderId
      })
    }).then(function (result) {
      dialogIncomingCall.close();
    });
  };
  
  buttonAccept.onclick = function (event) {
    fetch('@{VideoR PushMessageR}', {
      method: 'POST',
      headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
	"messageType": #{show PushMsgTypeAccept},
	"icon": message.data.icon,
	"channelId": message.data.channelId,
	"polite": message.data.polite,
	"ws": message.data.ws,
	"senderId": message.data.recipientId,
	"senderPhoto": message.data.senderPhoto,
	"recipientId": message.data.senderId
      })
    }).then(function (result) {
      dialogIncomingCall.close();
      const peerConnection = startCaleeVideoSession(message);
      dialogVideoSession.show();
      
      document.getElementById(#{idButtonEndVideoSession}).addEventListener('click', function (event) {
	fetch('@{VideoR PushMessageR}', {
	  method: 'POST',
	  headders: { 'Content-Type': 'application/x-www-form-urlencoded' },
	  body: new URLSearchParams({
	    "messageType": #{show PushMsgTypeEndVideoSession},
	    "icon": message.data.icon,
	    "channelId": message.data.channelId,
	    "polite": message.data.polite,
	    "ws": message.data.ws,
	    "senderId": message.data.recipientId,
	    "senderPhoto": message.data.senderPhoto,
	    "recipientId": message.data.senderId
	  })
	}).then(function (result) {
	  peerConnection.close();
	  dialogVideoSession.close();
	});
      });
      
    });
  };
  
  
  if (message.data.messageType === #{show PushMsgTypeCancel}) {
    
  } else if (message.data.messageType === #{show PushMsgTypeCall}) {    
    dialogIncomingCall.show();
  }
});


function startCaleeVideoSession (message) {
  
  const polite = message.data.polite;
  const remoteVideo = document.getElementById(#{idVideoRemote});
  const selfVideo = document.getElementById(#{idVideoSelf});

  var ws = new WebSocket(message.data.ws);

  const pc = new RTCPeerConnection(#{config});

  pc.ontrack = ({track, streams}) => {
    track.onunmute = () => {
      if ( ! remoteVideo.srcObject ) {
	remoteVideo.srcObject = streams[0];
      }
    }
  };

  let makingOffer = false;

  pc.onnegotiationneeded = async () => {
    try {
      makingOffer = true;
      await pc.setLocalDescription();
      ws.send(JSON.stringify({ description: pc.localDescription }));
    } catch (err) {
      console.error(err);
    } finally {
      makingOffer = false;
    }
  };

  pc.onicecandidate = ({ candidate }) => { ws.send(JSON.stringify({ candidate })); };

  let ignoreOffer = false;

  ws.onmessage = async (e) => {

    const {description, candidate} = JSON.parse(e.data);
    
    try {
      if (description) {
	const offerCollision =
	      description.type === "offer" &&
	      (makingOffer || pc.signalingState !== "stable");

	ignoreOffer = !polite && offerCollision;
	if (ignoreOffer) {
          return;
	}

	await pc.setRemoteDescription(description);
	if (description.type === "offer") {
          await pc.setLocalDescription();
          ws.send(JSON.stringify({ description: pc.localDescription }));
	}
      } else if (candidate) {
	try {
	  await pc.addIceCandidate(candidate);
	} catch (err) {
	  if (!ignoreOffer) {
	    throw err;
	  }
	}
      }
    } catch (err) {
      console.error(err);
    }
  };


  navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(function (stream) {
    
    stream.getTracks().forEach(function (track) { pc.addTrack(track, stream); });    
    return stream;
    
  }).then(function (stream) {
    
    document.getElementById(#{idVideoSelf}).srcObject = stream;
    return stream;
    
  }).then(function (stream) {

    document.getElementById(#{idButtonEndVideoSession}).addEventListener('click', function (event) {
      stream.getTracks().forEach(function (track) { track.stop(); });
    });
    
  }).catch(function (err) {
    console.error(err);
  });

  return pc;
};
