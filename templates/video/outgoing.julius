
function startCallerVideoSession() {
  
  var ws = new WebSocket(
    '@{toParent $ WebSoketR channelId polite}'.replace("http:", "ws:").replace("https:", "wss:")
  );

  const pc = new RTCPeerConnection(#{config});

  pc.ontrack = function (event) {
    event.track.onunmute = function (e) {
      const remoteVideo = document.getElementById(#{idVideoRemote});
      if ( ! remoteVideo.srcObject ) {
	remoteVideo.srcObject = event.streams[0];
      }
    };
  };

  let makingOffer = false;

  pc.onnegotiationneeded = async () => {
    try {
      makingOffer = true;
      await pc.setLocalDescription();
      ws.send(JSON.stringify({ description: pc.localDescription }));
    } catch (err) {
      console.error(err);
    } finally {
      makingOffer = false;
    }
  };

  pc.onicecandidate = ({ candidate }) => { ws.send(JSON.stringify({ candidate })); };

  let ignoreOffer = false;

  ws.onmessage = async (e) => {

    const { description, candidate } = JSON.parse(e.data);
    
    try {
      if (description) {
	const offerCollision = description.type === "offer" && (makingOffer || pc.signalingState !== "stable");

	ignoreOffer = ( ! #{polite} ) && offerCollision;
	if (ignoreOffer) {
          return;
	}

	await pc.setRemoteDescription(description);
	
	if (description.type === "offer") {
          await pc.setLocalDescription();
          ws.send(JSON.stringify({ description: pc.localDescription }));
	}
	
      } else if (candidate) {
	try {
	  await pc.addIceCandidate(candidate);
	} catch (err) {
	  if ( ! ignoreOffer ) {
	    throw err;
	  }
	}
      }
    } catch (err) {
      console.error(err);
    }
  };

  return navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(function (stream) {
    
    stream.getTracks().forEach(function (track) { pc.addTrack(track, stream); });    
    return stream;
    
  }).then(function (stream) {
    
    document.getElementById(#{idVideoSelf}).srcObject = stream;
    return stream;
    
  }).then(function (stream) {
    
    navigator.serviceWorker.addEventListener('message', function (message) {
      if (message.data.messageType === #{show PushMsgTypeEndVideoSession}) {
	stream.getTracks().forEach(function (track) { track.stop(); });
	pc.close();
	document.getElementById(#{idDialogVideoSession}).close();
	document.getElementById(#{idDialogVideoSessionEnded}).show();
      }
    });
    
  }).catch(function (err) {
    console.error(err);
  });
  
};


navigator.serviceWorker.addEventListener('message', function (message) {
  
  if (message.data.messageType === #{show PushMsgTypeAccept}) {
    
    document.getElementById(#{idDialogOutgoingCall}).close();
    startCallerVideoSession();
    document.getElementById(#{idDialogVideoSession}).show();
    
  } else if (message.data.messageType === #{show PushMsgTypeDecline}) {

    document.getElementById(#{idDialogOutgoingCall}).close();
    document.getElementById(#{idDialogCallDeclined}).show();
        
  }
  
});
